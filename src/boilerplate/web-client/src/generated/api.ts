/* tslint:disable */
/* eslint-disable */
/**
 * Libre Graph API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CollectionOfDriveItems
 */
export interface CollectionOfDriveItems {
    /**
     * 
     * @type {Array<DriveItem>}
     * @memberof CollectionOfDriveItems
     */
    'value'?: Array<DriveItem>;
    /**
     * 
     * @type {string}
     * @memberof CollectionOfDriveItems
     */
    '@odata.nextLink'?: string;
}
/**
 * 
 * @export
 * @interface CollectionOfDrives
 */
export interface CollectionOfDrives {
    /**
     * 
     * @type {Array<Drive>}
     * @memberof CollectionOfDrives
     */
    'value'?: Array<Drive>;
    /**
     * 
     * @type {string}
     * @memberof CollectionOfDrives
     */
    '@odata.nextLink'?: string;
}
/**
 * 
 * @export
 * @interface CollectionOfGroup
 */
export interface CollectionOfGroup {
    /**
     * 
     * @type {Array<Group>}
     * @memberof CollectionOfGroup
     */
    'value'?: Array<Group>;
    /**
     * 
     * @type {string}
     * @memberof CollectionOfGroup
     */
    '@odata.nextLink'?: string;
}
/**
 * 
 * @export
 * @interface CollectionOfUser
 */
export interface CollectionOfUser {
    /**
     * 
     * @type {Array<User>}
     * @memberof CollectionOfUser
     */
    'value'?: Array<User>;
    /**
     * 
     * @type {string}
     * @memberof CollectionOfUser
     */
    '@odata.nextLink'?: string;
}
/**
 * Information about the deleted state of the item. Read-only.
 * @export
 * @interface Deleted
 */
export interface Deleted {
    /**
     * Represents the state of the deleted item.
     * @type {string}
     * @memberof Deleted
     */
    'state'?: string;
}
/**
 * Represents a Directory object. Read-only.
 * @export
 * @interface DirectoryObject
 */
export interface DirectoryObject {
    /**
     * The unique identifier for the object. 12345678-9abc-def0-1234-56789abcde. The value of the ID property is often, but not exclusively, in the form of a GUID. The value should be treated as an opaque identifier and not based in being a GUID. Null values are not allowed. Read-only.
     * @type {string}
     * @memberof DirectoryObject
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DirectoryObject
     */
    'deletedDateTime'?: string;
}
/**
 * Storage Space. Read-only.
 * @export
 * @interface Drive
 */
export interface Drive {
    /**
     * Read-only.
     * @type {string}
     * @memberof Drive
     */
    'id'?: string;
    /**
     * 
     * @type {IdentitySet}
     * @memberof Drive
     */
    'createdBy'?: IdentitySet;
    /**
     * Date and time of item creation. Read-only.
     * @type {string}
     * @memberof Drive
     */
    'createdDateTime'?: string;
    /**
     * Provides a user-visible description of the item. Optional.
     * @type {string}
     * @memberof Drive
     */
    'description'?: string;
    /**
     * ETag for the item. Read-only.
     * @type {string}
     * @memberof Drive
     */
    'eTag'?: string;
    /**
     * 
     * @type {IdentitySet}
     * @memberof Drive
     */
    'lastModifiedBy'?: IdentitySet;
    /**
     * Date and time the item was last modified. Read-only.
     * @type {string}
     * @memberof Drive
     */
    'lastModifiedDateTime'?: string;
    /**
     * The name of the item. Read-write.
     * @type {string}
     * @memberof Drive
     */
    'name'?: string;
    /**
     * 
     * @type {ItemReference}
     * @memberof Drive
     */
    'parentReference'?: ItemReference;
    /**
     * URL that displays the resource in the browser. Read-only.
     * @type {string}
     * @memberof Drive
     */
    'webUrl'?: string;
    /**
     * 
     * @type {User}
     * @memberof Drive
     */
    'createdByUser'?: User;
    /**
     * 
     * @type {User}
     * @memberof Drive
     */
    'lastModifiedByUser'?: User;
    /**
     * Describes the type of drive represented by this resource. Values are \"personal\" for users home spaces, \"project\", \"virtual\" or \"share\". Read-only.
     * @type {string}
     * @memberof Drive
     */
    'driveType'?: string;
    /**
     * The drive alias can be used in clients to make the urls user friendly. Example: \'personal/einstein\'. This will be used to resolve to the correct driveID.
     * @type {string}
     * @memberof Drive
     */
    'driveAlias'?: string;
    /**
     * 
     * @type {IdentitySet}
     * @memberof Drive
     */
    'owner'?: IdentitySet;
    /**
     * 
     * @type {Quota}
     * @memberof Drive
     */
    'quota'?: Quota;
    /**
     * All items contained in the drive. Read-only. Nullable.
     * @type {Array<DriveItem>}
     * @memberof Drive
     */
    'items'?: Array<DriveItem>;
    /**
     * 
     * @type {DriveItem}
     * @memberof Drive
     */
    'root'?: DriveItem;
    /**
     * A collection of special drive resources.
     * @type {Array<DriveItem>}
     * @memberof Drive
     */
    'special'?: Array<DriveItem>;
}
/**
 * Reprensents a resource inside a drive. Read-only.
 * @export
 * @interface DriveItem
 */
export interface DriveItem {
    /**
     * Read-only.
     * @type {string}
     * @memberof DriveItem
     */
    'id'?: string;
    /**
     * 
     * @type {IdentitySet}
     * @memberof DriveItem
     */
    'createdBy'?: IdentitySet;
    /**
     * Date and time of item creation. Read-only.
     * @type {string}
     * @memberof DriveItem
     */
    'createdDateTime'?: string;
    /**
     * Provides a user-visible description of the item. Optional.
     * @type {string}
     * @memberof DriveItem
     */
    'description'?: string;
    /**
     * ETag for the item. Read-only.
     * @type {string}
     * @memberof DriveItem
     */
    'eTag'?: string;
    /**
     * 
     * @type {IdentitySet}
     * @memberof DriveItem
     */
    'lastModifiedBy'?: IdentitySet;
    /**
     * Date and time the item was last modified. Read-only.
     * @type {string}
     * @memberof DriveItem
     */
    'lastModifiedDateTime'?: string;
    /**
     * The name of the item. Read-write.
     * @type {string}
     * @memberof DriveItem
     */
    'name'?: string;
    /**
     * 
     * @type {ItemReference}
     * @memberof DriveItem
     */
    'parentReference'?: ItemReference;
    /**
     * URL that displays the resource in the browser. Read-only.
     * @type {string}
     * @memberof DriveItem
     */
    'webUrl'?: string;
    /**
     * 
     * @type {User}
     * @memberof DriveItem
     */
    'createdByUser'?: User;
    /**
     * 
     * @type {User}
     * @memberof DriveItem
     */
    'lastModifiedByUser'?: User;
    /**
     * The content stream, if the item represents a file.
     * @type {string}
     * @memberof DriveItem
     */
    'content'?: string;
    /**
     * An eTag for the content of the item. This eTag is not changed if only the metadata is changed. Note This property is not returned if the item is a folder. Read-only.
     * @type {string}
     * @memberof DriveItem
     */
    'cTag'?: string;
    /**
     * 
     * @type {Deleted}
     * @memberof DriveItem
     */
    'deleted'?: Deleted;
    /**
     * 
     * @type {OpenGraphFile}
     * @memberof DriveItem
     */
    'file'?: OpenGraphFile;
    /**
     * 
     * @type {FileSystemInfo}
     * @memberof DriveItem
     */
    'fileSystemInfo'?: FileSystemInfo;
    /**
     * 
     * @type {Folder}
     * @memberof DriveItem
     */
    'folder'?: Folder;
    /**
     * 
     * @type {Image}
     * @memberof DriveItem
     */
    'image'?: Image;
    /**
     * If this property is non-null, it indicates that the driveItem is the top-most driveItem in the drive.
     * @type {object}
     * @memberof DriveItem
     */
    'root'?: object;
    /**
     * 
     * @type {Trash}
     * @memberof DriveItem
     */
    'trash'?: Trash;
    /**
     * 
     * @type {SpecialFolder}
     * @memberof DriveItem
     */
    'specialFolder'?: SpecialFolder;
    /**
     * 
     * @type {RemoteItem}
     * @memberof DriveItem
     */
    'remoteItem'?: RemoteItem;
    /**
     * Size of the item in bytes. Read-only.
     * @type {number}
     * @memberof DriveItem
     */
    'size'?: number;
    /**
     * WebDAV compatible URL for the item. Read-only.
     * @type {string}
     * @memberof DriveItem
     */
    'webDavUrl'?: string;
    /**
     * Collection containing Item objects for the immediate children of Item. Only items representing folders have children. Read-only. Nullable.
     * @type {Array<DriveItem>}
     * @memberof DriveItem
     */
    'children'?: Array<DriveItem>;
    /**
     * The set of permissions for the item. Read-only. Nullable.
     * @type {Array<Permission>}
     * @memberof DriveItem
     */
    'permissions'?: Array<Permission>;
}
/**
 * File system information on client. Read-write.
 * @export
 * @interface FileSystemInfo
 */
export interface FileSystemInfo {
    /**
     * The UTC date and time the file was created on a client.
     * @type {string}
     * @memberof FileSystemInfo
     */
    'createdDateTime'?: string;
    /**
     * The UTC date and time the file was last accessed. Available for the recent file list only.
     * @type {string}
     * @memberof FileSystemInfo
     */
    'lastAccessedDateTime'?: string;
    /**
     * The UTC date and time the file was last modified on a client.
     * @type {string}
     * @memberof FileSystemInfo
     */
    'lastModifiedDateTime'?: string;
}
/**
 * Folder metadata, if the item is a folder. Read-only.
 * @export
 * @interface Folder
 */
export interface Folder {
    /**
     * Number of children contained immediately within this container.
     * @type {number}
     * @memberof Folder
     */
    'childCount'?: number;
    /**
     * 
     * @type {FolderView}
     * @memberof Folder
     */
    'view'?: FolderView;
}
/**
 * A collection of properties defining the recommended view for the folder.
 * @export
 * @interface FolderView
 */
export interface FolderView {
    /**
     * The method by which the folder should be sorted.
     * @type {string}
     * @memberof FolderView
     */
    'sortBy'?: string;
    /**
     * If true, indicates that items should be sorted in descending order. Otherwise, items should be sorted ascending.
     * @type {string}
     * @memberof FolderView
     */
    'sortOrder'?: string;
    /**
     * The type of view that should be used to represent the folder.
     * @type {string}
     * @memberof FolderView
     */
    'viewType'?: string;
}
/**
 * 
 * @export
 * @interface Group
 */
export interface Group {
    /**
     * Read-only.
     * @type {string}
     * @memberof Group
     */
    'id'?: string;
    /**
     * An optional description for the group. Returned by default. Supports $filter (eq, ne, not, ge, le, startsWith) and $search.
     * @type {string}
     * @memberof Group
     */
    'description'?: string;
    /**
     * The display name for the group. This property is required when a group is created and cannot be cleared during updates. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values), $search, and $orderBy.
     * @type {string}
     * @memberof Group
     */
    'displayName'?: string;
    /**
     * Users and groups that are members of this group. HTTP Methods: GET (supported for all groups), Nullable. Supports $expand.
     * @type {Array<User>}
     * @memberof Group
     */
    'members'?: Array<User>;
    /**
     * Contains the on-premises domainFQDN, also called dnsDomainName synchronized from the on-premises directory. The property is only populated for customers who are synchronizing their on-premises directory to Azure Active Directory via Azure AD Connect. Read-only. Returned only on $select.
     * @type {string}
     * @memberof Group
     */
    'onPremisesDomainName'?: string;
    /**
     * Contains the on-premises SAM account name synchronized from the on-premises directory. Read-only.
     * @type {string}
     * @memberof Group
     */
    'onPremisesSamAccountName'?: string;
    /**
     * A list of member references to the members to be added. Up to 20 members can be added with a single request
     * @type {Set<string>}
     * @memberof Group
     */
    'members@odata.bind'?: Set<string>;
}
/**
 * Hashes of the file\'s binary content, if available. Read-only.
 * @export
 * @interface Hashes
 */
export interface Hashes {
    /**
     * The CRC32 value of the file (if available). Read-only.
     * @type {string}
     * @memberof Hashes
     */
    'crc32Hash'?: string;
    /**
     * A proprietary hash of the file that can be used to determine if the contents of the file have changed (if available). Read-only.
     * @type {string}
     * @memberof Hashes
     */
    'quickXorHash'?: string;
    /**
     * SHA1 hash for the contents of the file (if available). Read-only.
     * @type {string}
     * @memberof Hashes
     */
    'sha1Hash'?: string;
    /**
     * SHA256 hash for the contents of the file (if available). Read-only.
     * @type {string}
     * @memberof Hashes
     */
    'sha256Hash'?: string;
}
/**
 * 
 * @export
 * @interface Identity
 */
export interface Identity {
    /**
     * The identity\'s display name. Note that this may not always be available or up to date. For example, if a user changes their display name, the API may show the new value in a future response, but the items associated with the user won\'t show up as having changed when using delta.
     * @type {string}
     * @memberof Identity
     */
    'displayName'?: string;
    /**
     * Unique identifier for the identity.
     * @type {string}
     * @memberof Identity
     */
    'id'?: string;
}
/**
 * Optional. User account.
 * @export
 * @interface IdentitySet
 */
export interface IdentitySet {
    /**
     * 
     * @type {Identity}
     * @memberof IdentitySet
     */
    'application'?: Identity;
    /**
     * 
     * @type {Identity}
     * @memberof IdentitySet
     */
    'device'?: Identity;
    /**
     * 
     * @type {Identity}
     * @memberof IdentitySet
     */
    'user'?: Identity;
}
/**
 * Image metadata, if the item is an image. Read-only.
 * @export
 * @interface Image
 */
export interface Image {
    /**
     * Optional. Height of the image, in pixels. Read-only.
     * @type {number}
     * @memberof Image
     */
    'height'?: number;
    /**
     * Optional. Width of the image, in pixels. Read-only.
     * @type {number}
     * @memberof Image
     */
    'width'?: number;
}
/**
 * 
 * @export
 * @interface ItemReference
 */
export interface ItemReference {
    /**
     * Unique identifier of the drive instance that contains the item. Read-only.
     * @type {string}
     * @memberof ItemReference
     */
    'driveId'?: string;
    /**
     * Identifies the type of drive. See [drive][] resource for values. Read-only.
     * @type {string}
     * @memberof ItemReference
     */
    'driveType'?: string;
    /**
     * Unique identifier of the item in the drive. Read-only.
     * @type {string}
     * @memberof ItemReference
     */
    'id'?: string;
    /**
     * The name of the item being referenced. Read-only.
     * @type {string}
     * @memberof ItemReference
     */
    'name'?: string;
    /**
     * Path that can be used to navigate to the item. Read-only.
     * @type {string}
     * @memberof ItemReference
     */
    'path'?: string;
    /**
     * A unique identifier for a shared resource that can be accessed via the [Shares][] API.
     * @type {string}
     * @memberof ItemReference
     */
    'shareId'?: string;
}
/**
 * 
 * @export
 * @interface MemberReference
 */
export interface MemberReference {
    /**
     * 
     * @type {string}
     * @memberof MemberReference
     */
    '@odata.id'?: string;
}
/**
 * 
 * @export
 * @interface OdataError
 */
export interface OdataError {
    /**
     * 
     * @type {OdataErrorMain}
     * @memberof OdataError
     */
    'error': OdataErrorMain;
}
/**
 * 
 * @export
 * @interface OdataErrorDetail
 */
export interface OdataErrorDetail {
    /**
     * 
     * @type {string}
     * @memberof OdataErrorDetail
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof OdataErrorDetail
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof OdataErrorDetail
     */
    'target'?: string;
}
/**
 * 
 * @export
 * @interface OdataErrorMain
 */
export interface OdataErrorMain {
    /**
     * 
     * @type {string}
     * @memberof OdataErrorMain
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof OdataErrorMain
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof OdataErrorMain
     */
    'target'?: string;
    /**
     * 
     * @type {Array<OdataErrorDetail>}
     * @memberof OdataErrorMain
     */
    'details'?: Array<OdataErrorDetail>;
    /**
     * The structure of this object is service-specific
     * @type {object}
     * @memberof OdataErrorMain
     */
    'innererror'?: object;
}
/**
 * File metadata, if the item is a file. Read-only.
 * @export
 * @interface OpenGraphFile
 */
export interface OpenGraphFile {
    /**
     * 
     * @type {Hashes}
     * @memberof OpenGraphFile
     */
    'hashes'?: Hashes;
    /**
     * The MIME type for the file. This is determined by logic on the server and might not be the value provided when the file was uploaded. Read-only.
     * @type {string}
     * @memberof OpenGraphFile
     */
    'mimeType'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof OpenGraphFile
     */
    'processingMetadata'?: boolean;
}
/**
 * 
 * @export
 * @interface PasswordChange
 */
export interface PasswordChange {
    /**
     * 
     * @type {string}
     * @memberof PasswordChange
     */
    'currentPassword'?: string;
    /**
     * 
     * @type {string}
     * @memberof PasswordChange
     */
    'newPassword'?: string;
}
/**
 * Password Profile associated with a user
 * @export
 * @interface PasswordProfile
 */
export interface PasswordProfile {
    /**
     * If true the user is required to change their password upon the next login
     * @type {boolean}
     * @memberof PasswordProfile
     */
    'forceChangePasswordNextSignIn'?: boolean;
    /**
     * The user\'s password
     * @type {string}
     * @memberof PasswordProfile
     */
    'password'?: string;
}
/**
 * The Permission resource provides information about a sharing permission granted for a DriveItem resource.
 * @export
 * @interface Permission
 */
export interface Permission {
    /**
     * 
     * @type {Array<IdentitySet>}
     * @memberof Permission
     */
    'grantedTo'?: Array<IdentitySet>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Permission
     */
    'roles'?: Array<string>;
}
/**
 * Optional. Information about the drive\'s storage space quota. Read-only.
 * @export
 * @interface Quota
 */
export interface Quota {
    /**
     * Total space consumed by files in the recycle bin, in bytes. Read-only.
     * @type {number}
     * @memberof Quota
     */
    'deleted'?: number;
    /**
     * Total space remaining before reaching the quota limit, in bytes. Read-only.
     * @type {number}
     * @memberof Quota
     */
    'remaining'?: number;
    /**
     * Enumeration value that indicates the state of the storage space. Either \"normal\", \"nearing\", \"critical\" or \"exceeded\". Read-only.
     * @type {string}
     * @memberof Quota
     */
    'state'?: string;
    /**
     * Total allowed storage space, in bytes. Read-only.
     * @type {number}
     * @memberof Quota
     */
    'total'?: number;
    /**
     * Total space used, in bytes. Read-only.
     * @type {number}
     * @memberof Quota
     */
    'used'?: number;
}
/**
 * Remote item data, if the item is shared from a drive other than the one being accessed. Read-only.
 * @export
 * @interface RemoteItem
 */
export interface RemoteItem {
    /**
     * 
     * @type {IdentitySet}
     * @memberof RemoteItem
     */
    'createdBy'?: IdentitySet;
    /**
     * Date and time of item creation. Read-only.
     * @type {string}
     * @memberof RemoteItem
     */
    'createdDateTime'?: string;
    /**
     * 
     * @type {OpenGraphFile}
     * @memberof RemoteItem
     */
    'file'?: OpenGraphFile;
    /**
     * 
     * @type {FileSystemInfo}
     * @memberof RemoteItem
     */
    'fileSystemInfo'?: FileSystemInfo;
    /**
     * 
     * @type {Folder}
     * @memberof RemoteItem
     */
    'folder'?: Folder;
    /**
     * Unique identifier for the remote item in its drive. Read-only.
     * @type {string}
     * @memberof RemoteItem
     */
    'id'?: string;
    /**
     * 
     * @type {Image}
     * @memberof RemoteItem
     */
    'image'?: Image;
    /**
     * 
     * @type {IdentitySet}
     * @memberof RemoteItem
     */
    'lastModifiedBy'?: IdentitySet;
    /**
     * Date and time the item was last modified. Read-only.
     * @type {string}
     * @memberof RemoteItem
     */
    'lastModifiedDateTime'?: string;
    /**
     * Optional. Filename of the remote item. Read-only.
     * @type {string}
     * @memberof RemoteItem
     */
    'name'?: string;
    /**
     * ETag for the item. Read-only.
     * @type {string}
     * @memberof RemoteItem
     */
    'eTag'?: string;
    /**
     * An eTag for the content of the item. This eTag is not changed if only the metadata is changed. Note This property is not returned if the item is a folder. Read-only.
     * @type {string}
     * @memberof RemoteItem
     */
    'cTag'?: string;
    /**
     * 
     * @type {ItemReference}
     * @memberof RemoteItem
     */
    'parentReference'?: ItemReference;
    /**
     * 
     * @type {Shared}
     * @memberof RemoteItem
     */
    'shared'?: Shared;
    /**
     * Size of the remote item. Read-only.
     * @type {number}
     * @memberof RemoteItem
     */
    'size'?: number;
    /**
     * 
     * @type {SpecialFolder}
     * @memberof RemoteItem
     */
    'specialFolder'?: SpecialFolder;
    /**
     * DAV compatible URL for the item.
     * @type {string}
     * @memberof RemoteItem
     */
    'webDavUrl'?: string;
    /**
     * URL that displays the resource in the browser. Read-only.
     * @type {string}
     * @memberof RemoteItem
     */
    'webUrl'?: string;
}
/**
 * 
 * @export
 * @interface Shared
 */
export interface Shared {
    /**
     * 
     * @type {IdentitySet}
     * @memberof Shared
     */
    'owner'?: IdentitySet;
    /**
     * Indicates the scope of how the item is shared: anonymous, organization, or users. Read-only.
     * @type {string}
     * @memberof Shared
     */
    'scope'?: string;
    /**
     * 
     * @type {IdentitySet}
     * @memberof Shared
     */
    'sharedBy'?: IdentitySet;
    /**
     * The UTC date and time when the item was shared. Read-only.
     * @type {string}
     * @memberof Shared
     */
    'sharedDateTime'?: string;
}
/**
 * If the current item is also available as a special folder, this facet is returned. Read-only
 * @export
 * @interface SpecialFolder
 */
export interface SpecialFolder {
    /**
     * The unique identifier for this item in the /drive/special collection
     * @type {string}
     * @memberof SpecialFolder
     */
    'name'?: string;
}
/**
 * Metadata for trashed drive Items
 * @export
 * @interface Trash
 */
export interface Trash {
    /**
     * 
     * @type {IdentitySet}
     * @memberof Trash
     */
    'trashedBy'?: IdentitySet;
    /**
     * The UTC date and time the folder was marked as trashed.
     * @type {string}
     * @memberof Trash
     */
    'trashedDateTime'?: string;
}
/**
 * Represents an Active Directory user object.
 * @export
 * @interface User
 */
export interface User {
    /**
     * Read-only.
     * @type {string}
     * @memberof User
     */
    'id'?: string;
    /**
     * The name displayed in the address book for the user. This value is usually the combination of the user\'s first name, middle initial, and last name. This property is required when a user is created and it cannot be cleared during updates. Returned by default. Supports $filter and $orderby.
     * @type {string}
     * @memberof User
     */
    'displayName'?: string;
    /**
     * A collection of drives available for this user. Read-only.
     * @type {Array<Drive>}
     * @memberof User
     */
    'drives'?: Array<Drive>;
    /**
     * 
     * @type {Drive}
     * @memberof User
     */
    'drive'?: Drive;
    /**
     * The SMTP address for the user, for example, \'jeff@contoso.onowncloud.com\'. Returned by default. Supports $filter and endsWith.
     * @type {string}
     * @memberof User
     */
    'mail'?: string;
    /**
     * Groups that this user is a member of. HTTP Methods: GET (supported for all groups). Read-only. Nullable. Supports $expand.
     * @type {Array<Group>}
     * @memberof User
     */
    'memberOf'?: Array<Group>;
    /**
     * Contains the on-premises SAM account name synchronized from the on-premises directory. Read-only.
     * @type {string}
     * @memberof User
     */
    'onPremisesSamAccountName'?: string;
    /**
     * 
     * @type {PasswordProfile}
     * @memberof User
     */
    'passwordProfile'?: PasswordProfile;
    /**
     * The user\'s surname (family name or last name). Returned by default. Supports $filter.
     * @type {string}
     * @memberof User
     */
    'surname'?: string;
}

/**
 * DrivesApi - axios parameter creator
 * @export
 */
export const DrivesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new space of a specific type
         * @param {Drive} drive New space property values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDrive: async (drive: Drive, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'drive' is not null or undefined
            assertParamExists('createDrive', 'drive', drive)
            const localVarPath = `/drives`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(drive, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a specific space
         * @param {string} driveId key: id of drive
         * @param {string} [ifMatch] ETag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDrive: async (driveId: string, ifMatch?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'driveId' is not null or undefined
            assertParamExists('deleteDrive', 'driveId', driveId)
            const localVarPath = `/drives/{drive-id}`
                .replace(`{${"drive-id"}}`, encodeURIComponent(String(driveId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get drive by id
         * @param {string} driveId key: id of drive
         * @param {Set<'id' | 'createdBy' | 'createdDateTime' | 'description' | 'eTag' | 'lastModifiedBy' | 'lastModifiedDateTime' | 'name' | 'parentReference' | 'webUrl' | 'driveType' | 'owner' | 'quota' | 'createdByUser' | 'lastModifiedByUser' | 'root' | 'special'>} [$select] Select properties to be returned
         * @param {Set<'*' | 'root' | 'special'>} [$expand] Expand related entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDrive: async (driveId: string, $select?: Set<'id' | 'createdBy' | 'createdDateTime' | 'description' | 'eTag' | 'lastModifiedBy' | 'lastModifiedDateTime' | 'name' | 'parentReference' | 'webUrl' | 'driveType' | 'owner' | 'quota' | 'createdByUser' | 'lastModifiedByUser' | 'root' | 'special'>, $expand?: Set<'*' | 'root' | 'special'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'driveId' is not null or undefined
            assertParamExists('getDrive', 'driveId', driveId)
            const localVarPath = `/drives/{drive-id}`
                .replace(`{${"drive-id"}}`, encodeURIComponent(String(driveId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($select) {
                localVarQueryParameter['$select'] = Array.from($select).join(COLLECTION_FORMATS.csv);
            }

            if ($expand) {
                localVarQueryParameter['$expand'] = Array.from($expand).join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update the space
         * @param {string} driveId key: id of drive
         * @param {Drive} drive New space values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDrive: async (driveId: string, drive: Drive, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'driveId' is not null or undefined
            assertParamExists('updateDrive', 'driveId', driveId)
            // verify required parameter 'drive' is not null or undefined
            assertParamExists('updateDrive', 'drive', drive)
            const localVarPath = `/drives/{drive-id}`
                .replace(`{${"drive-id"}}`, encodeURIComponent(String(driveId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(drive, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DrivesApi - functional programming interface
 * @export
 */
export const DrivesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DrivesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new space of a specific type
         * @param {Drive} drive New space property values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDrive(drive: Drive, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Drive>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDrive(drive, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a specific space
         * @param {string} driveId key: id of drive
         * @param {string} [ifMatch] ETag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDrive(driveId: string, ifMatch?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDrive(driveId, ifMatch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get drive by id
         * @param {string} driveId key: id of drive
         * @param {Set<'id' | 'createdBy' | 'createdDateTime' | 'description' | 'eTag' | 'lastModifiedBy' | 'lastModifiedDateTime' | 'name' | 'parentReference' | 'webUrl' | 'driveType' | 'owner' | 'quota' | 'createdByUser' | 'lastModifiedByUser' | 'root' | 'special'>} [$select] Select properties to be returned
         * @param {Set<'*' | 'root' | 'special'>} [$expand] Expand related entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDrive(driveId: string, $select?: Set<'id' | 'createdBy' | 'createdDateTime' | 'description' | 'eTag' | 'lastModifiedBy' | 'lastModifiedDateTime' | 'name' | 'parentReference' | 'webUrl' | 'driveType' | 'owner' | 'quota' | 'createdByUser' | 'lastModifiedByUser' | 'root' | 'special'>, $expand?: Set<'*' | 'root' | 'special'>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Drive>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDrive(driveId, $select, $expand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update the space
         * @param {string} driveId key: id of drive
         * @param {Drive} drive New space values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDrive(driveId: string, drive: Drive, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Drive>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDrive(driveId, drive, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DrivesApi - factory interface
 * @export
 */
export const DrivesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DrivesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new space of a specific type
         * @param {Drive} drive New space property values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDrive(drive: Drive, options?: any): AxiosPromise<Drive> {
            return localVarFp.createDrive(drive, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a specific space
         * @param {string} driveId key: id of drive
         * @param {string} [ifMatch] ETag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDrive(driveId: string, ifMatch?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteDrive(driveId, ifMatch, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get drive by id
         * @param {string} driveId key: id of drive
         * @param {Set<'id' | 'createdBy' | 'createdDateTime' | 'description' | 'eTag' | 'lastModifiedBy' | 'lastModifiedDateTime' | 'name' | 'parentReference' | 'webUrl' | 'driveType' | 'owner' | 'quota' | 'createdByUser' | 'lastModifiedByUser' | 'root' | 'special'>} [$select] Select properties to be returned
         * @param {Set<'*' | 'root' | 'special'>} [$expand] Expand related entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDrive(driveId: string, $select?: Set<'id' | 'createdBy' | 'createdDateTime' | 'description' | 'eTag' | 'lastModifiedBy' | 'lastModifiedDateTime' | 'name' | 'parentReference' | 'webUrl' | 'driveType' | 'owner' | 'quota' | 'createdByUser' | 'lastModifiedByUser' | 'root' | 'special'>, $expand?: Set<'*' | 'root' | 'special'>, options?: any): AxiosPromise<Drive> {
            return localVarFp.getDrive(driveId, $select, $expand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update the space
         * @param {string} driveId key: id of drive
         * @param {Drive} drive New space values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDrive(driveId: string, drive: Drive, options?: any): AxiosPromise<Drive> {
            return localVarFp.updateDrive(driveId, drive, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DrivesApi - object-oriented interface
 * @export
 * @class DrivesApi
 * @extends {BaseAPI}
 */
export class DrivesApi extends BaseAPI {
    /**
     * 
     * @summary Create a new space of a specific type
     * @param {Drive} drive New space property values
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrivesApi
     */
    public createDrive(drive: Drive, options?: AxiosRequestConfig) {
        return DrivesApiFp(this.configuration).createDrive(drive, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a specific space
     * @param {string} driveId key: id of drive
     * @param {string} [ifMatch] ETag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrivesApi
     */
    public deleteDrive(driveId: string, ifMatch?: string, options?: AxiosRequestConfig) {
        return DrivesApiFp(this.configuration).deleteDrive(driveId, ifMatch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get drive by id
     * @param {string} driveId key: id of drive
     * @param {Set<'id' | 'createdBy' | 'createdDateTime' | 'description' | 'eTag' | 'lastModifiedBy' | 'lastModifiedDateTime' | 'name' | 'parentReference' | 'webUrl' | 'driveType' | 'owner' | 'quota' | 'createdByUser' | 'lastModifiedByUser' | 'root' | 'special'>} [$select] Select properties to be returned
     * @param {Set<'*' | 'root' | 'special'>} [$expand] Expand related entities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrivesApi
     */
    public getDrive(driveId: string, $select?: Set<'id' | 'createdBy' | 'createdDateTime' | 'description' | 'eTag' | 'lastModifiedBy' | 'lastModifiedDateTime' | 'name' | 'parentReference' | 'webUrl' | 'driveType' | 'owner' | 'quota' | 'createdByUser' | 'lastModifiedByUser' | 'root' | 'special'>, $expand?: Set<'*' | 'root' | 'special'>, options?: AxiosRequestConfig) {
        return DrivesApiFp(this.configuration).getDrive(driveId, $select, $expand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update the space
     * @param {string} driveId key: id of drive
     * @param {Drive} drive New space values
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrivesApi
     */
    public updateDrive(driveId: string, drive: Drive, options?: AxiosRequestConfig) {
        return DrivesApiFp(this.configuration).updateDrive(driveId, drive, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DrivesGetDrivesApi - axios parameter creator
 * @export
 */
export const DrivesGetDrivesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get All drives
         * @param {number} [$top] Show only the first n items
         * @param {number} [$skip] Skip the first n items
         * @param {string} [$orderby] The $orderby system query option allows clients to request resources in either ascending order using asc or descending order using desc.
         * @param {string} [$filter] Filter items by property values
         * @param {boolean} [$count] Include count of items
         * @param {Set<'id' | 'createdBy' | 'createdDateTime' | 'description' | 'eTag' | 'lastModifiedBy' | 'lastModifiedDateTime' | 'name' | 'parentReference' | 'webUrl' | 'driveType' | 'owner' | 'quota' | 'createdByUser' | 'lastModifiedByUser' | 'root' | 'special'>} [$select] Select properties to be returned
         * @param {Set<'*' | 'root' | 'root/permissions/grantedTo/user' | 'special'>} [$expand] Expand related entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllDrives: async ($top?: number, $skip?: number, $orderby?: string, $filter?: string, $count?: boolean, $select?: Set<'id' | 'createdBy' | 'createdDateTime' | 'description' | 'eTag' | 'lastModifiedBy' | 'lastModifiedDateTime' | 'name' | 'parentReference' | 'webUrl' | 'driveType' | 'owner' | 'quota' | 'createdByUser' | 'lastModifiedByUser' | 'root' | 'special'>, $expand?: Set<'*' | 'root' | 'root/permissions/grantedTo/user' | 'special'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/drives`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($orderby !== undefined) {
                localVarQueryParameter['$orderby'] = $orderby;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }

            if ($select) {
                localVarQueryParameter['$select'] = Array.from($select).join(COLLECTION_FORMATS.csv);
            }

            if ($expand) {
                localVarQueryParameter['$expand'] = Array.from($expand).join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DrivesGetDrivesApi - functional programming interface
 * @export
 */
export const DrivesGetDrivesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DrivesGetDrivesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get All drives
         * @param {number} [$top] Show only the first n items
         * @param {number} [$skip] Skip the first n items
         * @param {string} [$orderby] The $orderby system query option allows clients to request resources in either ascending order using asc or descending order using desc.
         * @param {string} [$filter] Filter items by property values
         * @param {boolean} [$count] Include count of items
         * @param {Set<'id' | 'createdBy' | 'createdDateTime' | 'description' | 'eTag' | 'lastModifiedBy' | 'lastModifiedDateTime' | 'name' | 'parentReference' | 'webUrl' | 'driveType' | 'owner' | 'quota' | 'createdByUser' | 'lastModifiedByUser' | 'root' | 'special'>} [$select] Select properties to be returned
         * @param {Set<'*' | 'root' | 'root/permissions/grantedTo/user' | 'special'>} [$expand] Expand related entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllDrives($top?: number, $skip?: number, $orderby?: string, $filter?: string, $count?: boolean, $select?: Set<'id' | 'createdBy' | 'createdDateTime' | 'description' | 'eTag' | 'lastModifiedBy' | 'lastModifiedDateTime' | 'name' | 'parentReference' | 'webUrl' | 'driveType' | 'owner' | 'quota' | 'createdByUser' | 'lastModifiedByUser' | 'root' | 'special'>, $expand?: Set<'*' | 'root' | 'root/permissions/grantedTo/user' | 'special'>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionOfDrives>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllDrives($top, $skip, $orderby, $filter, $count, $select, $expand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DrivesGetDrivesApi - factory interface
 * @export
 */
export const DrivesGetDrivesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DrivesGetDrivesApiFp(configuration)
    return {
        /**
         * 
         * @summary Get All drives
         * @param {number} [$top] Show only the first n items
         * @param {number} [$skip] Skip the first n items
         * @param {string} [$orderby] The $orderby system query option allows clients to request resources in either ascending order using asc or descending order using desc.
         * @param {string} [$filter] Filter items by property values
         * @param {boolean} [$count] Include count of items
         * @param {Set<'id' | 'createdBy' | 'createdDateTime' | 'description' | 'eTag' | 'lastModifiedBy' | 'lastModifiedDateTime' | 'name' | 'parentReference' | 'webUrl' | 'driveType' | 'owner' | 'quota' | 'createdByUser' | 'lastModifiedByUser' | 'root' | 'special'>} [$select] Select properties to be returned
         * @param {Set<'*' | 'root' | 'root/permissions/grantedTo/user' | 'special'>} [$expand] Expand related entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllDrives($top?: number, $skip?: number, $orderby?: string, $filter?: string, $count?: boolean, $select?: Set<'id' | 'createdBy' | 'createdDateTime' | 'description' | 'eTag' | 'lastModifiedBy' | 'lastModifiedDateTime' | 'name' | 'parentReference' | 'webUrl' | 'driveType' | 'owner' | 'quota' | 'createdByUser' | 'lastModifiedByUser' | 'root' | 'special'>, $expand?: Set<'*' | 'root' | 'root/permissions/grantedTo/user' | 'special'>, options?: any): AxiosPromise<CollectionOfDrives> {
            return localVarFp.listAllDrives($top, $skip, $orderby, $filter, $count, $select, $expand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DrivesGetDrivesApi - object-oriented interface
 * @export
 * @class DrivesGetDrivesApi
 * @extends {BaseAPI}
 */
export class DrivesGetDrivesApi extends BaseAPI {
    /**
     * 
     * @summary Get All drives
     * @param {number} [$top] Show only the first n items
     * @param {number} [$skip] Skip the first n items
     * @param {string} [$orderby] The $orderby system query option allows clients to request resources in either ascending order using asc or descending order using desc.
     * @param {string} [$filter] Filter items by property values
     * @param {boolean} [$count] Include count of items
     * @param {Set<'id' | 'createdBy' | 'createdDateTime' | 'description' | 'eTag' | 'lastModifiedBy' | 'lastModifiedDateTime' | 'name' | 'parentReference' | 'webUrl' | 'driveType' | 'owner' | 'quota' | 'createdByUser' | 'lastModifiedByUser' | 'root' | 'special'>} [$select] Select properties to be returned
     * @param {Set<'*' | 'root' | 'root/permissions/grantedTo/user' | 'special'>} [$expand] Expand related entities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrivesGetDrivesApi
     */
    public listAllDrives($top?: number, $skip?: number, $orderby?: string, $filter?: string, $count?: boolean, $select?: Set<'id' | 'createdBy' | 'createdDateTime' | 'description' | 'eTag' | 'lastModifiedBy' | 'lastModifiedDateTime' | 'name' | 'parentReference' | 'webUrl' | 'driveType' | 'owner' | 'quota' | 'createdByUser' | 'lastModifiedByUser' | 'root' | 'special'>, $expand?: Set<'*' | 'root' | 'root/permissions/grantedTo/user' | 'special'>, options?: AxiosRequestConfig) {
        return DrivesGetDrivesApiFp(this.configuration).listAllDrives($top, $skip, $orderby, $filter, $count, $select, $expand, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DrivesRootApi - axios parameter creator
 * @export
 */
export const DrivesRootApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get root from arbitrary space
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoot: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/drives/{drive-id}/root`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DrivesRootApi - functional programming interface
 * @export
 */
export const DrivesRootApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DrivesRootApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get root from arbitrary space
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoot(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DriveItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoot(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DrivesRootApi - factory interface
 * @export
 */
export const DrivesRootApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DrivesRootApiFp(configuration)
    return {
        /**
         * 
         * @summary Get root from arbitrary space
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoot(options?: any): AxiosPromise<DriveItem> {
            return localVarFp.getRoot(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DrivesRootApi - object-oriented interface
 * @export
 * @class DrivesRootApi
 * @extends {BaseAPI}
 */
export class DrivesRootApi extends BaseAPI {
    /**
     * 
     * @summary Get root from arbitrary space
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrivesRootApi
     */
    public getRoot(options?: AxiosRequestConfig) {
        return DrivesRootApiFp(this.configuration).getRoot(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GroupApi - axios parameter creator
 * @export
 */
export const GroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a member to a group
         * @param {string} groupId key: id of group
         * @param {MemberReference} memberReference Object to be added as member
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMember: async (groupId: string, memberReference: MemberReference, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('addMember', 'groupId', groupId)
            // verify required parameter 'memberReference' is not null or undefined
            assertParamExists('addMember', 'memberReference', memberReference)
            const localVarPath = `/groups/{group-id}/members/$ref`
                .replace(`{${"group-id"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(memberReference, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete entity from groups
         * @param {string} groupId key: id of group
         * @param {string} [ifMatch] ETag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroup: async (groupId: string, ifMatch?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('deleteGroup', 'groupId', groupId)
            const localVarPath = `/groups/{group-id}`
                .replace(`{${"group-id"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete member from a group
         * @param {string} groupId key: id of group
         * @param {string} directoryObjectId key: id of group member to remove
         * @param {string} [ifMatch] ETag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMember: async (groupId: string, directoryObjectId: string, ifMatch?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('deleteMember', 'groupId', groupId)
            // verify required parameter 'directoryObjectId' is not null or undefined
            assertParamExists('deleteMember', 'directoryObjectId', directoryObjectId)
            const localVarPath = `/groups/{group-id}/members/{directory-object-id}/$ref`
                .replace(`{${"group-id"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"directory-object-id"}}`, encodeURIComponent(String(directoryObjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get entity from groups by key
         * @param {string} groupId key: id of group
         * @param {Set<'id' | 'description' | 'displayName' | 'members' | 'onPremisesDomainName' | 'onPremisesSamAccountName'>} [$select] Select properties to be returned
         * @param {Set<'members'>} [$expand] Expand related entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroup: async (groupId: string, $select?: Set<'id' | 'description' | 'displayName' | 'members' | 'onPremisesDomainName' | 'onPremisesSamAccountName'>, $expand?: Set<'members'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('getGroup', 'groupId', groupId)
            const localVarPath = `/groups/{group-id}`
                .replace(`{${"group-id"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($select) {
                localVarQueryParameter['$select'] = Array.from($select).join(COLLECTION_FORMATS.csv);
            }

            if ($expand) {
                localVarQueryParameter['$expand'] = Array.from($expand).join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update entity in groups
         * @param {string} groupId key: id of group
         * @param {Group} group New property values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroup: async (groupId: string, group: Group, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('updateGroup', 'groupId', groupId)
            // verify required parameter 'group' is not null or undefined
            assertParamExists('updateGroup', 'group', group)
            const localVarPath = `/groups/{group-id}`
                .replace(`{${"group-id"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(group, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupApi - functional programming interface
 * @export
 */
export const GroupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GroupApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a member to a group
         * @param {string} groupId key: id of group
         * @param {MemberReference} memberReference Object to be added as member
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMember(groupId: string, memberReference: MemberReference, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMember(groupId, memberReference, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete entity from groups
         * @param {string} groupId key: id of group
         * @param {string} [ifMatch] ETag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGroup(groupId: string, ifMatch?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGroup(groupId, ifMatch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete member from a group
         * @param {string} groupId key: id of group
         * @param {string} directoryObjectId key: id of group member to remove
         * @param {string} [ifMatch] ETag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMember(groupId: string, directoryObjectId: string, ifMatch?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMember(groupId, directoryObjectId, ifMatch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get entity from groups by key
         * @param {string} groupId key: id of group
         * @param {Set<'id' | 'description' | 'displayName' | 'members' | 'onPremisesDomainName' | 'onPremisesSamAccountName'>} [$select] Select properties to be returned
         * @param {Set<'members'>} [$expand] Expand related entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroup(groupId: string, $select?: Set<'id' | 'description' | 'displayName' | 'members' | 'onPremisesDomainName' | 'onPremisesSamAccountName'>, $expand?: Set<'members'>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroup(groupId, $select, $expand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update entity in groups
         * @param {string} groupId key: id of group
         * @param {Group} group New property values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGroup(groupId: string, group: Group, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGroup(groupId, group, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GroupApi - factory interface
 * @export
 */
export const GroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GroupApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a member to a group
         * @param {string} groupId key: id of group
         * @param {MemberReference} memberReference Object to be added as member
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMember(groupId: string, memberReference: MemberReference, options?: any): AxiosPromise<void> {
            return localVarFp.addMember(groupId, memberReference, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete entity from groups
         * @param {string} groupId key: id of group
         * @param {string} [ifMatch] ETag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroup(groupId: string, ifMatch?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteGroup(groupId, ifMatch, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete member from a group
         * @param {string} groupId key: id of group
         * @param {string} directoryObjectId key: id of group member to remove
         * @param {string} [ifMatch] ETag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMember(groupId: string, directoryObjectId: string, ifMatch?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteMember(groupId, directoryObjectId, ifMatch, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get entity from groups by key
         * @param {string} groupId key: id of group
         * @param {Set<'id' | 'description' | 'displayName' | 'members' | 'onPremisesDomainName' | 'onPremisesSamAccountName'>} [$select] Select properties to be returned
         * @param {Set<'members'>} [$expand] Expand related entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroup(groupId: string, $select?: Set<'id' | 'description' | 'displayName' | 'members' | 'onPremisesDomainName' | 'onPremisesSamAccountName'>, $expand?: Set<'members'>, options?: any): AxiosPromise<Group> {
            return localVarFp.getGroup(groupId, $select, $expand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update entity in groups
         * @param {string} groupId key: id of group
         * @param {Group} group New property values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroup(groupId: string, group: Group, options?: any): AxiosPromise<void> {
            return localVarFp.updateGroup(groupId, group, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GroupApi - object-oriented interface
 * @export
 * @class GroupApi
 * @extends {BaseAPI}
 */
export class GroupApi extends BaseAPI {
    /**
     * 
     * @summary Add a member to a group
     * @param {string} groupId key: id of group
     * @param {MemberReference} memberReference Object to be added as member
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public addMember(groupId: string, memberReference: MemberReference, options?: AxiosRequestConfig) {
        return GroupApiFp(this.configuration).addMember(groupId, memberReference, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete entity from groups
     * @param {string} groupId key: id of group
     * @param {string} [ifMatch] ETag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public deleteGroup(groupId: string, ifMatch?: string, options?: AxiosRequestConfig) {
        return GroupApiFp(this.configuration).deleteGroup(groupId, ifMatch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete member from a group
     * @param {string} groupId key: id of group
     * @param {string} directoryObjectId key: id of group member to remove
     * @param {string} [ifMatch] ETag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public deleteMember(groupId: string, directoryObjectId: string, ifMatch?: string, options?: AxiosRequestConfig) {
        return GroupApiFp(this.configuration).deleteMember(groupId, directoryObjectId, ifMatch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get entity from groups by key
     * @param {string} groupId key: id of group
     * @param {Set<'id' | 'description' | 'displayName' | 'members' | 'onPremisesDomainName' | 'onPremisesSamAccountName'>} [$select] Select properties to be returned
     * @param {Set<'members'>} [$expand] Expand related entities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public getGroup(groupId: string, $select?: Set<'id' | 'description' | 'displayName' | 'members' | 'onPremisesDomainName' | 'onPremisesSamAccountName'>, $expand?: Set<'members'>, options?: AxiosRequestConfig) {
        return GroupApiFp(this.configuration).getGroup(groupId, $select, $expand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update entity in groups
     * @param {string} groupId key: id of group
     * @param {Group} group New property values
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public updateGroup(groupId: string, group: Group, options?: AxiosRequestConfig) {
        return GroupApiFp(this.configuration).updateGroup(groupId, group, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GroupsApi - axios parameter creator
 * @export
 */
export const GroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add new entity to groups
         * @param {Group} group New entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroup: async (group: Group, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            assertParamExists('createGroup', 'group', group)
            const localVarPath = `/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(group, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get entities from groups
         * @param {number} [$top] Show only the first n items
         * @param {number} [$skip] Skip the first n items
         * @param {string} [$search] Search items by search phrases
         * @param {string} [$filter] Filter items by property values
         * @param {boolean} [$count] Include count of items
         * @param {Set<'displayName' | 'displayName desc'>} [$orderby] Order items by property values
         * @param {Set<'id' | 'description' | 'displayName' | 'mail' | 'members' | 'onPremisesDomainName' | 'onPremisesSamAccountName'>} [$select] Select properties to be returned
         * @param {Set<'members'>} [$expand] Expand related entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGroups: async ($top?: number, $skip?: number, $search?: string, $filter?: string, $count?: boolean, $orderby?: Set<'displayName' | 'displayName desc'>, $select?: Set<'id' | 'description' | 'displayName' | 'mail' | 'members' | 'onPremisesDomainName' | 'onPremisesSamAccountName'>, $expand?: Set<'members'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($search !== undefined) {
                localVarQueryParameter['$search'] = $search;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }

            if ($orderby) {
                localVarQueryParameter['$orderby'] = Array.from($orderby).join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = Array.from($select).join(COLLECTION_FORMATS.csv);
            }

            if ($expand) {
                localVarQueryParameter['$expand'] = Array.from($expand).join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupsApi - functional programming interface
 * @export
 */
export const GroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add new entity to groups
         * @param {Group} group New entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGroup(group: Group, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGroup(group, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get entities from groups
         * @param {number} [$top] Show only the first n items
         * @param {number} [$skip] Skip the first n items
         * @param {string} [$search] Search items by search phrases
         * @param {string} [$filter] Filter items by property values
         * @param {boolean} [$count] Include count of items
         * @param {Set<'displayName' | 'displayName desc'>} [$orderby] Order items by property values
         * @param {Set<'id' | 'description' | 'displayName' | 'mail' | 'members' | 'onPremisesDomainName' | 'onPremisesSamAccountName'>} [$select] Select properties to be returned
         * @param {Set<'members'>} [$expand] Expand related entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listGroups($top?: number, $skip?: number, $search?: string, $filter?: string, $count?: boolean, $orderby?: Set<'displayName' | 'displayName desc'>, $select?: Set<'id' | 'description' | 'displayName' | 'mail' | 'members' | 'onPremisesDomainName' | 'onPremisesSamAccountName'>, $expand?: Set<'members'>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionOfGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listGroups($top, $skip, $search, $filter, $count, $orderby, $select, $expand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GroupsApi - factory interface
 * @export
 */
export const GroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GroupsApiFp(configuration)
    return {
        /**
         * 
         * @summary Add new entity to groups
         * @param {Group} group New entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroup(group: Group, options?: any): AxiosPromise<Group> {
            return localVarFp.createGroup(group, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get entities from groups
         * @param {number} [$top] Show only the first n items
         * @param {number} [$skip] Skip the first n items
         * @param {string} [$search] Search items by search phrases
         * @param {string} [$filter] Filter items by property values
         * @param {boolean} [$count] Include count of items
         * @param {Set<'displayName' | 'displayName desc'>} [$orderby] Order items by property values
         * @param {Set<'id' | 'description' | 'displayName' | 'mail' | 'members' | 'onPremisesDomainName' | 'onPremisesSamAccountName'>} [$select] Select properties to be returned
         * @param {Set<'members'>} [$expand] Expand related entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGroups($top?: number, $skip?: number, $search?: string, $filter?: string, $count?: boolean, $orderby?: Set<'displayName' | 'displayName desc'>, $select?: Set<'id' | 'description' | 'displayName' | 'mail' | 'members' | 'onPremisesDomainName' | 'onPremisesSamAccountName'>, $expand?: Set<'members'>, options?: any): AxiosPromise<CollectionOfGroup> {
            return localVarFp.listGroups($top, $skip, $search, $filter, $count, $orderby, $select, $expand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GroupsApi - object-oriented interface
 * @export
 * @class GroupsApi
 * @extends {BaseAPI}
 */
export class GroupsApi extends BaseAPI {
    /**
     * 
     * @summary Add new entity to groups
     * @param {Group} group New entity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public createGroup(group: Group, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).createGroup(group, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get entities from groups
     * @param {number} [$top] Show only the first n items
     * @param {number} [$skip] Skip the first n items
     * @param {string} [$search] Search items by search phrases
     * @param {string} [$filter] Filter items by property values
     * @param {boolean} [$count] Include count of items
     * @param {Set<'displayName' | 'displayName desc'>} [$orderby] Order items by property values
     * @param {Set<'id' | 'description' | 'displayName' | 'mail' | 'members' | 'onPremisesDomainName' | 'onPremisesSamAccountName'>} [$select] Select properties to be returned
     * @param {Set<'members'>} [$expand] Expand related entities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public listGroups($top?: number, $skip?: number, $search?: string, $filter?: string, $count?: boolean, $orderby?: Set<'displayName' | 'displayName desc'>, $select?: Set<'id' | 'description' | 'displayName' | 'mail' | 'members' | 'onPremisesDomainName' | 'onPremisesSamAccountName'>, $expand?: Set<'members'>, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).listGroups($top, $skip, $search, $filter, $count, $orderby, $select, $expand, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MeChangepasswordApi - axios parameter creator
 * @export
 */
export const MeChangepasswordApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Chanage your own password
         * @param {PasswordChange} passwordChange Password change request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeOwnPassword: async (passwordChange: PasswordChange, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'passwordChange' is not null or undefined
            assertParamExists('changeOwnPassword', 'passwordChange', passwordChange)
            const localVarPath = `/me/changePassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(passwordChange, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MeChangepasswordApi - functional programming interface
 * @export
 */
export const MeChangepasswordApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MeChangepasswordApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Chanage your own password
         * @param {PasswordChange} passwordChange Password change request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeOwnPassword(passwordChange: PasswordChange, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeOwnPassword(passwordChange, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MeChangepasswordApi - factory interface
 * @export
 */
export const MeChangepasswordApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MeChangepasswordApiFp(configuration)
    return {
        /**
         * 
         * @summary Chanage your own password
         * @param {PasswordChange} passwordChange Password change request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeOwnPassword(passwordChange: PasswordChange, options?: any): AxiosPromise<void> {
            return localVarFp.changeOwnPassword(passwordChange, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MeChangepasswordApi - object-oriented interface
 * @export
 * @class MeChangepasswordApi
 * @extends {BaseAPI}
 */
export class MeChangepasswordApi extends BaseAPI {
    /**
     * 
     * @summary Chanage your own password
     * @param {PasswordChange} passwordChange Password change request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeChangepasswordApi
     */
    public changeOwnPassword(passwordChange: PasswordChange, options?: AxiosRequestConfig) {
        return MeChangepasswordApiFp(this.configuration).changeOwnPassword(passwordChange, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MeDriveApi - axios parameter creator
 * @export
 */
export const MeDriveApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get personal space for user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHome: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/drive`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MeDriveApi - functional programming interface
 * @export
 */
export const MeDriveApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MeDriveApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get personal space for user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHome(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Drive>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHome(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MeDriveApi - factory interface
 * @export
 */
export const MeDriveApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MeDriveApiFp(configuration)
    return {
        /**
         * 
         * @summary Get personal space for user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHome(options?: any): AxiosPromise<Drive> {
            return localVarFp.getHome(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MeDriveApi - object-oriented interface
 * @export
 * @class MeDriveApi
 * @extends {BaseAPI}
 */
export class MeDriveApi extends BaseAPI {
    /**
     * 
     * @summary Get personal space for user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeDriveApi
     */
    public getHome(options?: AxiosRequestConfig) {
        return MeDriveApiFp(this.configuration).getHome(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MeDriveRootApi - axios parameter creator
 * @export
 */
export const MeDriveRootApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get root from personal space
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        homeGetRoot: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/drive/root`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MeDriveRootApi - functional programming interface
 * @export
 */
export const MeDriveRootApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MeDriveRootApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get root from personal space
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async homeGetRoot(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DriveItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.homeGetRoot(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MeDriveRootApi - factory interface
 * @export
 */
export const MeDriveRootApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MeDriveRootApiFp(configuration)
    return {
        /**
         * 
         * @summary Get root from personal space
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        homeGetRoot(options?: any): AxiosPromise<DriveItem> {
            return localVarFp.homeGetRoot(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MeDriveRootApi - object-oriented interface
 * @export
 * @class MeDriveRootApi
 * @extends {BaseAPI}
 */
export class MeDriveRootApi extends BaseAPI {
    /**
     * 
     * @summary Get root from personal space
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeDriveRootApi
     */
    public homeGetRoot(options?: AxiosRequestConfig) {
        return MeDriveRootApiFp(this.configuration).homeGetRoot(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MeDriveRootChildrenApi - axios parameter creator
 * @export
 */
export const MeDriveRootChildrenApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get children from drive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        homeGetChildren: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/drive/root/children`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MeDriveRootChildrenApi - functional programming interface
 * @export
 */
export const MeDriveRootChildrenApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MeDriveRootChildrenApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get children from drive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async homeGetChildren(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionOfDriveItems>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.homeGetChildren(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MeDriveRootChildrenApi - factory interface
 * @export
 */
export const MeDriveRootChildrenApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MeDriveRootChildrenApiFp(configuration)
    return {
        /**
         * 
         * @summary Get children from drive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        homeGetChildren(options?: any): AxiosPromise<CollectionOfDriveItems> {
            return localVarFp.homeGetChildren(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MeDriveRootChildrenApi - object-oriented interface
 * @export
 * @class MeDriveRootChildrenApi
 * @extends {BaseAPI}
 */
export class MeDriveRootChildrenApi extends BaseAPI {
    /**
     * 
     * @summary Get children from drive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeDriveRootChildrenApi
     */
    public homeGetChildren(options?: AxiosRequestConfig) {
        return MeDriveRootChildrenApiFp(this.configuration).homeGetChildren(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MeDrivesApi - axios parameter creator
 * @export
 */
export const MeDrivesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get drives from me
         * @param {number} [$top] Show only the first n items
         * @param {number} [$skip] Skip the first n items
         * @param {string} [$orderby] The $orderby system query option allows clients to request resources in either ascending order using asc or descending order using desc.
         * @param {string} [$filter] Filter items by property values
         * @param {boolean} [$count] Include count of items
         * @param {Set<'id' | 'createdBy' | 'createdDateTime' | 'description' | 'eTag' | 'lastModifiedBy' | 'lastModifiedDateTime' | 'name' | 'parentReference' | 'webUrl' | 'driveType' | 'owner' | 'quota' | 'createdByUser' | 'lastModifiedByUser' | 'root' | 'special'>} [$select] Select properties to be returned
         * @param {Set<'*' | 'root' | 'root/permissions/grantedTo/user' | 'special'>} [$expand] Expand related entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMyDrives: async ($top?: number, $skip?: number, $orderby?: string, $filter?: string, $count?: boolean, $select?: Set<'id' | 'createdBy' | 'createdDateTime' | 'description' | 'eTag' | 'lastModifiedBy' | 'lastModifiedDateTime' | 'name' | 'parentReference' | 'webUrl' | 'driveType' | 'owner' | 'quota' | 'createdByUser' | 'lastModifiedByUser' | 'root' | 'special'>, $expand?: Set<'*' | 'root' | 'root/permissions/grantedTo/user' | 'special'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/drives`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($orderby !== undefined) {
                localVarQueryParameter['$orderby'] = $orderby;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }

            if ($select) {
                localVarQueryParameter['$select'] = Array.from($select).join(COLLECTION_FORMATS.csv);
            }

            if ($expand) {
                localVarQueryParameter['$expand'] = Array.from($expand).join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MeDrivesApi - functional programming interface
 * @export
 */
export const MeDrivesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MeDrivesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get drives from me
         * @param {number} [$top] Show only the first n items
         * @param {number} [$skip] Skip the first n items
         * @param {string} [$orderby] The $orderby system query option allows clients to request resources in either ascending order using asc or descending order using desc.
         * @param {string} [$filter] Filter items by property values
         * @param {boolean} [$count] Include count of items
         * @param {Set<'id' | 'createdBy' | 'createdDateTime' | 'description' | 'eTag' | 'lastModifiedBy' | 'lastModifiedDateTime' | 'name' | 'parentReference' | 'webUrl' | 'driveType' | 'owner' | 'quota' | 'createdByUser' | 'lastModifiedByUser' | 'root' | 'special'>} [$select] Select properties to be returned
         * @param {Set<'*' | 'root' | 'root/permissions/grantedTo/user' | 'special'>} [$expand] Expand related entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMyDrives($top?: number, $skip?: number, $orderby?: string, $filter?: string, $count?: boolean, $select?: Set<'id' | 'createdBy' | 'createdDateTime' | 'description' | 'eTag' | 'lastModifiedBy' | 'lastModifiedDateTime' | 'name' | 'parentReference' | 'webUrl' | 'driveType' | 'owner' | 'quota' | 'createdByUser' | 'lastModifiedByUser' | 'root' | 'special'>, $expand?: Set<'*' | 'root' | 'root/permissions/grantedTo/user' | 'special'>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionOfDrives>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMyDrives($top, $skip, $orderby, $filter, $count, $select, $expand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MeDrivesApi - factory interface
 * @export
 */
export const MeDrivesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MeDrivesApiFp(configuration)
    return {
        /**
         * 
         * @summary Get drives from me
         * @param {number} [$top] Show only the first n items
         * @param {number} [$skip] Skip the first n items
         * @param {string} [$orderby] The $orderby system query option allows clients to request resources in either ascending order using asc or descending order using desc.
         * @param {string} [$filter] Filter items by property values
         * @param {boolean} [$count] Include count of items
         * @param {Set<'id' | 'createdBy' | 'createdDateTime' | 'description' | 'eTag' | 'lastModifiedBy' | 'lastModifiedDateTime' | 'name' | 'parentReference' | 'webUrl' | 'driveType' | 'owner' | 'quota' | 'createdByUser' | 'lastModifiedByUser' | 'root' | 'special'>} [$select] Select properties to be returned
         * @param {Set<'*' | 'root' | 'root/permissions/grantedTo/user' | 'special'>} [$expand] Expand related entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMyDrives($top?: number, $skip?: number, $orderby?: string, $filter?: string, $count?: boolean, $select?: Set<'id' | 'createdBy' | 'createdDateTime' | 'description' | 'eTag' | 'lastModifiedBy' | 'lastModifiedDateTime' | 'name' | 'parentReference' | 'webUrl' | 'driveType' | 'owner' | 'quota' | 'createdByUser' | 'lastModifiedByUser' | 'root' | 'special'>, $expand?: Set<'*' | 'root' | 'root/permissions/grantedTo/user' | 'special'>, options?: any): AxiosPromise<CollectionOfDrives> {
            return localVarFp.listMyDrives($top, $skip, $orderby, $filter, $count, $select, $expand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MeDrivesApi - object-oriented interface
 * @export
 * @class MeDrivesApi
 * @extends {BaseAPI}
 */
export class MeDrivesApi extends BaseAPI {
    /**
     * 
     * @summary Get drives from me
     * @param {number} [$top] Show only the first n items
     * @param {number} [$skip] Skip the first n items
     * @param {string} [$orderby] The $orderby system query option allows clients to request resources in either ascending order using asc or descending order using desc.
     * @param {string} [$filter] Filter items by property values
     * @param {boolean} [$count] Include count of items
     * @param {Set<'id' | 'createdBy' | 'createdDateTime' | 'description' | 'eTag' | 'lastModifiedBy' | 'lastModifiedDateTime' | 'name' | 'parentReference' | 'webUrl' | 'driveType' | 'owner' | 'quota' | 'createdByUser' | 'lastModifiedByUser' | 'root' | 'special'>} [$select] Select properties to be returned
     * @param {Set<'*' | 'root' | 'root/permissions/grantedTo/user' | 'special'>} [$expand] Expand related entities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeDrivesApi
     */
    public listMyDrives($top?: number, $skip?: number, $orderby?: string, $filter?: string, $count?: boolean, $select?: Set<'id' | 'createdBy' | 'createdDateTime' | 'description' | 'eTag' | 'lastModifiedBy' | 'lastModifiedDateTime' | 'name' | 'parentReference' | 'webUrl' | 'driveType' | 'owner' | 'quota' | 'createdByUser' | 'lastModifiedByUser' | 'root' | 'special'>, $expand?: Set<'*' | 'root' | 'root/permissions/grantedTo/user' | 'special'>, options?: AxiosRequestConfig) {
        return MeDrivesApiFp(this.configuration).listMyDrives($top, $skip, $orderby, $filter, $count, $select, $expand, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MeUserApi - axios parameter creator
 * @export
 */
export const MeUserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get current user
         * @param {Set<'memberOf'>} [$expand] Expand related entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOwnUser: async ($expand?: Set<'memberOf'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($expand) {
                localVarQueryParameter['$expand'] = Array.from($expand).join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MeUserApi - functional programming interface
 * @export
 */
export const MeUserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MeUserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get current user
         * @param {Set<'memberOf'>} [$expand] Expand related entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOwnUser($expand?: Set<'memberOf'>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOwnUser($expand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MeUserApi - factory interface
 * @export
 */
export const MeUserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MeUserApiFp(configuration)
    return {
        /**
         * 
         * @summary Get current user
         * @param {Set<'memberOf'>} [$expand] Expand related entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOwnUser($expand?: Set<'memberOf'>, options?: any): AxiosPromise<User> {
            return localVarFp.getOwnUser($expand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MeUserApi - object-oriented interface
 * @export
 * @class MeUserApi
 * @extends {BaseAPI}
 */
export class MeUserApi extends BaseAPI {
    /**
     * 
     * @summary Get current user
     * @param {Set<'memberOf'>} [$expand] Expand related entities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeUserApi
     */
    public getOwnUser($expand?: Set<'memberOf'>, options?: AxiosRequestConfig) {
        return MeUserApiFp(this.configuration).getOwnUser($expand, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete entity from users
         * @param {string} userId key: id of user
         * @param {string} [ifMatch] ETag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (userId: string, ifMatch?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteUser', 'userId', userId)
            const localVarPath = `/users/{user-id}`
                .replace(`{${"user-id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get entity from users by key
         * @param {string} userId key: id of user
         * @param {Set<'id' | 'displayName' | 'drive' | 'drives' | 'mail' | 'memberOf' | 'onPremisesSamAccountName' | 'surname'>} [$select] Select properties to be returned
         * @param {Set<'drive' | 'drives' | 'memberOf'>} [$expand] Expand related entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (userId: string, $select?: Set<'id' | 'displayName' | 'drive' | 'drives' | 'mail' | 'memberOf' | 'onPremisesSamAccountName' | 'surname'>, $expand?: Set<'drive' | 'drives' | 'memberOf'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUser', 'userId', userId)
            const localVarPath = `/users/{user-id}`
                .replace(`{${"user-id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($select) {
                localVarQueryParameter['$select'] = Array.from($select).join(COLLECTION_FORMATS.csv);
            }

            if ($expand) {
                localVarQueryParameter['$expand'] = Array.from($expand).join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update entity in users
         * @param {string} userId key: id of user
         * @param {User} user New property values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (userId: string, user: User, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateUser', 'userId', userId)
            // verify required parameter 'user' is not null or undefined
            assertParamExists('updateUser', 'user', user)
            const localVarPath = `/users/{user-id}`
                .replace(`{${"user-id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(user, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete entity from users
         * @param {string} userId key: id of user
         * @param {string} [ifMatch] ETag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(userId: string, ifMatch?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(userId, ifMatch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get entity from users by key
         * @param {string} userId key: id of user
         * @param {Set<'id' | 'displayName' | 'drive' | 'drives' | 'mail' | 'memberOf' | 'onPremisesSamAccountName' | 'surname'>} [$select] Select properties to be returned
         * @param {Set<'drive' | 'drives' | 'memberOf'>} [$expand] Expand related entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(userId: string, $select?: Set<'id' | 'displayName' | 'drive' | 'drives' | 'mail' | 'memberOf' | 'onPremisesSamAccountName' | 'surname'>, $expand?: Set<'drive' | 'drives' | 'memberOf'>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(userId, $select, $expand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update entity in users
         * @param {string} userId key: id of user
         * @param {User} user New property values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(userId: string, user: User, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(userId, user, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete entity from users
         * @param {string} userId key: id of user
         * @param {string} [ifMatch] ETag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(userId: string, ifMatch?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteUser(userId, ifMatch, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get entity from users by key
         * @param {string} userId key: id of user
         * @param {Set<'id' | 'displayName' | 'drive' | 'drives' | 'mail' | 'memberOf' | 'onPremisesSamAccountName' | 'surname'>} [$select] Select properties to be returned
         * @param {Set<'drive' | 'drives' | 'memberOf'>} [$expand] Expand related entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(userId: string, $select?: Set<'id' | 'displayName' | 'drive' | 'drives' | 'mail' | 'memberOf' | 'onPremisesSamAccountName' | 'surname'>, $expand?: Set<'drive' | 'drives' | 'memberOf'>, options?: any): AxiosPromise<User> {
            return localVarFp.getUser(userId, $select, $expand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update entity in users
         * @param {string} userId key: id of user
         * @param {User} user New property values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(userId: string, user: User, options?: any): AxiosPromise<User> {
            return localVarFp.updateUser(userId, user, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary Delete entity from users
     * @param {string} userId key: id of user
     * @param {string} [ifMatch] ETag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public deleteUser(userId: string, ifMatch?: string, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).deleteUser(userId, ifMatch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get entity from users by key
     * @param {string} userId key: id of user
     * @param {Set<'id' | 'displayName' | 'drive' | 'drives' | 'mail' | 'memberOf' | 'onPremisesSamAccountName' | 'surname'>} [$select] Select properties to be returned
     * @param {Set<'drive' | 'drives' | 'memberOf'>} [$expand] Expand related entities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUser(userId: string, $select?: Set<'id' | 'displayName' | 'drive' | 'drives' | 'mail' | 'memberOf' | 'onPremisesSamAccountName' | 'surname'>, $expand?: Set<'drive' | 'drives' | 'memberOf'>, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getUser(userId, $select, $expand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update entity in users
     * @param {string} userId key: id of user
     * @param {User} user New property values
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public updateUser(userId: string, user: User, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).updateUser(userId, user, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add new entity to users
         * @param {User} user New entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (user: User, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'user' is not null or undefined
            assertParamExists('createUser', 'user', user)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(user, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get entities from users
         * @param {number} [$top] Show only the first n items
         * @param {number} [$skip] Skip the first n items
         * @param {string} [$search] Search items by search phrases
         * @param {string} [$filter] Filter items by property values
         * @param {boolean} [$count] Include count of items
         * @param {Set<'displayName' | 'displayName desc' | 'mail' | 'mail desc' | 'onPremisesSamAccountName' | 'onPremisesSamAccountName desc'>} [$orderby] Order items by property values
         * @param {Set<'id' | 'displayName' | 'mail' | 'memberOf' | 'onPremisesSamAccountName' | 'surname'>} [$select] Select properties to be returned
         * @param {Set<'drive' | 'drives' | 'memberOf'>} [$expand] Expand related entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers: async ($top?: number, $skip?: number, $search?: string, $filter?: string, $count?: boolean, $orderby?: Set<'displayName' | 'displayName desc' | 'mail' | 'mail desc' | 'onPremisesSamAccountName' | 'onPremisesSamAccountName desc'>, $select?: Set<'id' | 'displayName' | 'mail' | 'memberOf' | 'onPremisesSamAccountName' | 'surname'>, $expand?: Set<'drive' | 'drives' | 'memberOf'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($search !== undefined) {
                localVarQueryParameter['$search'] = $search;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }

            if ($orderby) {
                localVarQueryParameter['$orderby'] = Array.from($orderby).join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = Array.from($select).join(COLLECTION_FORMATS.csv);
            }

            if ($expand) {
                localVarQueryParameter['$expand'] = Array.from($expand).join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add new entity to users
         * @param {User} user New entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(user: User, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(user, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get entities from users
         * @param {number} [$top] Show only the first n items
         * @param {number} [$skip] Skip the first n items
         * @param {string} [$search] Search items by search phrases
         * @param {string} [$filter] Filter items by property values
         * @param {boolean} [$count] Include count of items
         * @param {Set<'displayName' | 'displayName desc' | 'mail' | 'mail desc' | 'onPremisesSamAccountName' | 'onPremisesSamAccountName desc'>} [$orderby] Order items by property values
         * @param {Set<'id' | 'displayName' | 'mail' | 'memberOf' | 'onPremisesSamAccountName' | 'surname'>} [$select] Select properties to be returned
         * @param {Set<'drive' | 'drives' | 'memberOf'>} [$expand] Expand related entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUsers($top?: number, $skip?: number, $search?: string, $filter?: string, $count?: boolean, $orderby?: Set<'displayName' | 'displayName desc' | 'mail' | 'mail desc' | 'onPremisesSamAccountName' | 'onPremisesSamAccountName desc'>, $select?: Set<'id' | 'displayName' | 'mail' | 'memberOf' | 'onPremisesSamAccountName' | 'surname'>, $expand?: Set<'drive' | 'drives' | 'memberOf'>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionOfUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUsers($top, $skip, $search, $filter, $count, $orderby, $select, $expand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @summary Add new entity to users
         * @param {User} user New entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(user: User, options?: any): AxiosPromise<User> {
            return localVarFp.createUser(user, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get entities from users
         * @param {number} [$top] Show only the first n items
         * @param {number} [$skip] Skip the first n items
         * @param {string} [$search] Search items by search phrases
         * @param {string} [$filter] Filter items by property values
         * @param {boolean} [$count] Include count of items
         * @param {Set<'displayName' | 'displayName desc' | 'mail' | 'mail desc' | 'onPremisesSamAccountName' | 'onPremisesSamAccountName desc'>} [$orderby] Order items by property values
         * @param {Set<'id' | 'displayName' | 'mail' | 'memberOf' | 'onPremisesSamAccountName' | 'surname'>} [$select] Select properties to be returned
         * @param {Set<'drive' | 'drives' | 'memberOf'>} [$expand] Expand related entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers($top?: number, $skip?: number, $search?: string, $filter?: string, $count?: boolean, $orderby?: Set<'displayName' | 'displayName desc' | 'mail' | 'mail desc' | 'onPremisesSamAccountName' | 'onPremisesSamAccountName desc'>, $select?: Set<'id' | 'displayName' | 'mail' | 'memberOf' | 'onPremisesSamAccountName' | 'surname'>, $expand?: Set<'drive' | 'drives' | 'memberOf'>, options?: any): AxiosPromise<CollectionOfUser> {
            return localVarFp.listUsers($top, $skip, $search, $filter, $count, $orderby, $select, $expand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @summary Add new entity to users
     * @param {User} user New entity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public createUser(user: User, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).createUser(user, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get entities from users
     * @param {number} [$top] Show only the first n items
     * @param {number} [$skip] Skip the first n items
     * @param {string} [$search] Search items by search phrases
     * @param {string} [$filter] Filter items by property values
     * @param {boolean} [$count] Include count of items
     * @param {Set<'displayName' | 'displayName desc' | 'mail' | 'mail desc' | 'onPremisesSamAccountName' | 'onPremisesSamAccountName desc'>} [$orderby] Order items by property values
     * @param {Set<'id' | 'displayName' | 'mail' | 'memberOf' | 'onPremisesSamAccountName' | 'surname'>} [$select] Select properties to be returned
     * @param {Set<'drive' | 'drives' | 'memberOf'>} [$expand] Expand related entities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listUsers($top?: number, $skip?: number, $search?: string, $filter?: string, $count?: boolean, $orderby?: Set<'displayName' | 'displayName desc' | 'mail' | 'mail desc' | 'onPremisesSamAccountName' | 'onPremisesSamAccountName desc'>, $select?: Set<'id' | 'displayName' | 'mail' | 'memberOf' | 'onPremisesSamAccountName' | 'surname'>, $expand?: Set<'drive' | 'drives' | 'memberOf'>, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listUsers($top, $skip, $search, $filter, $count, $orderby, $select, $expand, options).then((request) => request(this.axios, this.basePath));
    }
}


